# -*- mode: python; -*-
# vim: set syntax=python:

workspace_name = repository_name()[1:]

config_setting(
    name = "darwin",
    values = {"host_cpu": "darwin"}
)

config_setting(
    name = "windows",
    values = {"cpu": "x64_windows"}
)

config_setting(
    name = "windows_msys",
    values = {"cpu": "x64_windows_msys"}
)

config_setting(
    name = "windows_msvc",
    values = {"cpu": "x64_windows_msvc"}
)

config_setting(
    name = "windows_debug",
    values = {"cpu": "x64_windows", "compilation_mode": "dbg"}
)

config_setting(
    name = "windows_msvc_debug",
    values = {"cpu": "x64_msvc_windows", "compilation_mode": "dbg"}
)

cc_library(
    name = "sdl",
    srcs = glob([
        # Based on README.Porting
        "src/*.c",                "src/*.h",
        "src/audio/*.c",          "src/audio/*.h",
        "src/cdrom/*.c",          "src/cdrom/*.h",
        "src/cpuinfo/*.c",        "src/cpuinfo/*.h",
        "src/events/*.c",         "src/events/*.h",
        "src/file/*.c",           "src/file/*.h",
        "src/joystick/*.c",       "src/joystick/*.h",
        "src/stdlib/*.c",         "src/stdlib/*.h",
        "src/thread/*.c",         "src/thread/*.h",
        "src/timer/*.c",          "src/timer/*.h",
        "src/video/*.c",          "src/video/*.h",
        "src/audio/disk/*.c",     "src/audio/disk/*.h",
        "src/audio/dummy/*.c",    "src/audio/dummy/*.h",
        "src/video/dummy/*.c",    "src/video/dummy/*.h",
        "src/joystick/dummy/*.c", "src/joystick/dummy/*.h",
        "src/cdrom/dummy/*.c",    "src/cdrom/dummy/*.h",
        "src/timer/dummy/*.c",    "src/timer/dummy/*.h",
        "src/loadso/dummy/*.c",   "src/loadso/dummy/*.h",

        "src/loadso/dlopen/*.c",  "src/loadso/dlopen/*.h",
        #"src/video/Xext/*.c",     "src/video/Xext/*.h",
        "src/video/Xext/extensions/*.h",

        ]) + select({
            ":darwin": glob([
                "src/audio/macosx/*.c",   "src/audio/macosx/*.h",
                "src/cdrom/macosx/*.c",   "src/cdrom/macosx/*.h",
                "src/joystick/darwin/*.c","src/joystick/darwin/*.h",
                "src/loadso/macosx/*.c",  "src/loadso/macosx/*.h",
                "src/video/quartz/*.c",   "src/video/quartz/*.h",  # TODO(ivucica): add .m
                #"src/video/dga/*.c",      "src/video/dga/*.h",
                #"src/video/maccommon/*.c","src/video/maccommon/*.h",
                #"src/video/macdsp/*.c",   "src/video/macdsp/*.h",
                #"src/video/macrom/*.c",   "src/video/macrom/*.h",
                "src/thread/pthread/*.c", "src/thread/pthread/*.h",
                "src/timer/unix/*.c",     "src/timer/unix/*.h",
                "src/thread/generic/SDL_syssem.c",
                "src/thread/generic/SDL_systhread_c.h",
            ], exclude=[
                "src/video/quartz/SDL_QuartzVideo.h",  # see [patch2]
                "src/thread/pthread/SDL_syssem.c", # this merely includes generic syssem.c anyway.
            ]) + [
                "patch2/src/video/quartz/SDL_QuartzVideo.h",  # see [patch2]
                "fix_mac_audioplayer.c",
            ],
            ":windows": glob([
                "src/video/wincommon/*.c", "src/video/wincommon/*.h",
                "src/video/windib/*.c",    "src/video/windib/*.h",
                "src/video/windx5/*.c",    "src/video/windx5/*.h",
                "src/joystick/win32/*.c",  "src/joystick/win32/*.h",
                "src/cdrom/win32/*.c",     "src/cdrom/win32/*.h",
                "src/audio/windib/*.c",    "src/audio/windib/*.h",
                "src/audio/windx5/*.c",    "src/audio/windx5/*.h",
                "src/thread/win32/SDL_sysmutex.c",
                "src/thread/win32/SDL_syssem.c",
                "src/thread/win32/SDL_systhread.c",
                "src/thread/win32/SDL_systhread_c.h",
                "src/thread/win32/SDL_systhread.h",
                "src/timer/win32/*.c",     "src/timer/win32/*.h",
            ]),
            ":windows_msys": glob([
                "src/video/wincommon/*.c", "src/video/wincommon/*.h",
                "src/video/windib/*.c",    "src/video/windib/*.h",
                "src/video/windx5/*.c",    "src/video/windx5/*.h",
                "src/joystick/win32/*.c",  "src/joystick/win32/*.h",
                "src/cdrom/win32/*.c",     "src/cdrom/win32/*.h",
                "src/audio/windib/*.c",    "src/audio/windib/*.h",
                "src/audio/windx5/*.c",    "src/audio/windx5/*.h",
                "src/thread/win32/SDL_sysmutex.c",
                "src/thread/win32/SDL_syssem.c",
                "src/thread/win32/SDL_systhread.c",
                "src/thread/win32/SDL_systhread_c.h",
                "src/thread/win32/SDL_systhread.h",
                "src/timer/win32/*.c",     "src/timer/win32/*.h",
            ]),
            ":windows_msvc": glob([
                "src/video/wincommon/*.c", "src/video/wincommon/*.h",
                "src/video/windib/*.c",    "src/video/windib/*.h",
                "src/video/windx5/*.c",    "src/video/windx5/*.h",
                "src/joystick/win32/*.c",  "src/joystick/win32/*.h",
                "src/cdrom/win32/*.c",     "src/cdrom/win32/*.h",
                "src/audio/windib/*.c",    "src/audio/windib/*.h",
                "src/audio/windx5/*.c",    "src/audio/windx5/*.h",
                "src/thread/win32/SDL_sysmutex.c",
                "src/thread/win32/SDL_syssem.c",
                "src/thread/win32/SDL_systhread.c",
                "src/thread/win32/SDL_systhread_c.h",
                "src/thread/win32/SDL_systhread.h",
                "src/timer/win32/*.c",     "src/timer/win32/*.h",
            ]),
            "//conditions:default": glob([
                "src/video/x11/*.c",      "src/video/x11/*.h",
                "src/video/dga/*.c",      "src/video/dga/*.h",
                "src/video/fbcon/*.c",    "src/video/fbcon/*.h",
                "src/joystick/linux/*.c", "src/joystick/linux/*.h",
                "src/cdrom/linux/*.c",    "src/cdrom/linux/*.h",
                "src/audio/alsa/*.c",     "src/audio/alsa/*.h",
                "src/audio/dsp/*.c",      "src/audio/dsp/*.h",
                "src/audio/dma/*.c",      "src/audio/dma/*.h",
                "src/thread/pthread/*.c", "src/thread/pthread/*.h",
                "src/video/Xext/Xxf86dga/*.c", "src/video/Xext/Xxf86dga/*.h",
                "src/video/Xext/Xv/*.c", "src/video/Xext/Xv/*.h",
                "src/video/Xext/XME/*.c", "src/video/Xext/XME/*.h",
                "src/video/Xext/Xxf86vm/*.c", "src/video/Xext/Xxf86vm/*.h",
                "src/video/Xext/Xinerama/*.c", "src/video/Xext/Xinerama/*.h",
                "src/timer/unix/*.c",     "src/timer/unix/*.h",
            ], exclude=[
                "src/video/x11/SDL_x11sym.h",  # see [patch1]
            ]) + [
                "patch1/src/video/x11/SDL_x11sym.h",  # see [patch1]
            ],
        }),
    hdrs = [i.replace("include/", "SDL/") for i in glob(["include/*.h"])],
    includes = [
        ".", "SDL",
        "src/thread",
    ] + select({
        ":windows": [],
        ":windows_msys": [],
        ":windows_msvc": [],
        "//conditions:default": [
          "patch1", "patch1/src/video/x11",  # see [patch1]
          "patch2", "patch2/src/video/quartz", # see [patch2]
          "external/libx11-dev/usr/include",
          "external/libxext-dev/usr/include",
          "external/x11proto-dev/usr/include", # TODO: only if bin debs are used; or make x11repository expose these
          "external/libx11-xcb-dev/usr/include", # TODO: only if bin debs are used; or make x11repository expose these
          "external/libxcb1-dev/usr/include", # TODO: only if bin debs are used; or make x11repository expose these
          "external/libxdmcp-dev/usr/include", # TODO: only if bin debs are used; or make x11repository expose these
          "external/libalsaplayer-dev/usr/include", # TODO: only if bin debs are used; or make x11repository expose these
          "external/libasound2-dev/usr/include", # TODO: only if bin debs are used; or make x11repository expose these
        ],
    }),
    copts = [
        "-Iexternal/x11repository",
        "-isystem", "external/libx11-dev/usr/include", # TODO: only if bin debs are used; or make x11repository expose these
        "-isystem", "external/libxext-dev/usr/include", # TODO: only if bin debs are used; or make x11repository expose these
        "-isystem", "external/x11proto-dev/usr/include", # TODO: only if bin debs are used; or make x11repository expose these
        "-isystem", "external/libx11-xcb-dev/usr/include", # TODO: only if bin debs are used; or make x11repository expose these
        "-isystem", "external/libxcb1-dev/usr/include", # TODO: only if bin debs are used; or make x11repository expose these
        "-isystem", "external/libxdmcp-dev/usr/include", # TODO: only if bin debs are used; or make x11repository expose these
        "-isystem", "external/libalsaplayer-dev/usr/include", # TODO: only if bin debs are used; or make x11repository expose these
        "-isystem", "external/libasound2-dev/usr/include", # TODO: only if bin debs are used; or make x11repository expose these
    ] + select({
        ":darwin": [
            "-DSDL_VIDEO_DRIVER_QUARTZ=1",
        ],
        "//conditions:default": ["-DSDL_VIDEO_DRIVER_X11"], # TODO: only define X11 driver like this for deb binary builds -- possibly only needed because of missing pkgconfig data?
    }),
    linkopts = select({
        ":windows": [
            "-DEFAULTLIB:winmm.lib",
            "-DEFAULTLIB:dxguid.lib",
            "-DEFAULTLIB:gdi32.lib",
            "-DEFAULTLIB:opengl32.lib",
            "-DEFAULTLIB:user32.lib",
            "-DEFAULTLIB:ddraw.lib",
            "-DEFAULTLIB:advapi32.lib",
        ],
        ":windows_msys": [
        ],
        ":windows_msvc": [
            "-DEFAULTLIB:winmm.lib",
            "-DEFAULTLIB:dxguid.lib",
            "-DEFAULTLIB:gdi32.lib",
            "-DEFAULTLIB:opengl32.lib",
            "-DEFAULTLIB:user32.lib",
            "-DEFAULTLIB:ddraw.lib",
            "-DEFAULTLIB:advapi32.lib",
        ],
        ":darwin": [
            "-framework Foundation",
            "-framework AppKit",
            "-framework OpenGL",
            "-framework IOKit",
            "-framework CoreFoundation",
            "-framework CoreAudio",
            "-framework AudioToolbox",
            "-framework Carbon",
            "-framework Cocoa",
        ],
        "//conditions:default": [
            "-ldl",
            "-lalsaplayer", "-Lexternal/libalsaplayer-dev/usr/lib/x86_64-linux-gnu", # why is -L required for deb builds?
            "-pthread",
        ],
    }) + select({
        ":windows_debug": ["-SUBSYSTEM:CONSOLE"],
        ":windows_msvc_debug": ["-SUBSYSTEM:CONSOLE"],
        ":windows": ["-SUBSYSTEM:WINDOWS"],
        ":windows_msvc": ["-SUBSYSTEM:WINDOWS"],
        "//conditions:default": [],
    }),
    deps = select({
        ":darwin": [":sdlobjc"],
        "//conditions:default": [],
    }) + select({
        ":windows": [],
        ":windows_msys": [],
        ":windows_msvc": [],
        "//conditions:default": [
          "@x11repository//:X11",
          "@x11repository//:Xext",
          "@libx11-dev//:libx11-dev", # <---- THE REAL THING that fixed include for Xlib.h
          "@libxext-dev//:libxext-dev",
          "@x11proto-dev//:x11proto-dev",
          "@libx11-xcb-dev//:libx11-xcb-dev",
          "@libxcb1-dev//:libxcb1-dev",
          "@libxau-dev//:libxau-dev",
          "@libxdmcp-dev//:libxdmcp-dev",
          "@libasound2-dev//:libasound2-dev",
          "@libalsaplayer-dev//:libalsaplayer-dev",

          "@libx11-dev//:libs", # missing symbols with staticlib rule... how about a cc_library instead
          "@libxext-dev//:libs",
          #"@x11proto-dev//:libs",
          "@libx11-xcb-dev//:libs",
          "@libxcb1-dev//:libs",
          "@libxau-dev//:libs",
          "@libxdmcp-dev//:libs",
          #"@libasound2-dev//:libs",
          "@libalsaplayer-dev//:libs",
        ],
    }),
    visibility = ["//visibility:public"],
    linkstatic = 1,
)

# TODO(ivucica): Running configure should be done only on Linux, and not
# on OS X.
genrule(
    name = "sdlheaders",
    srcs = select({
        ":windows": [],
        ":windows_msys": [],
        ":windows_msvc": [],
        "//conditions:default": [
            "configure", "README", "Makefile.in", "sdl-config.in", "sdl.pc.in", "SDL.spec.in", "SDL.qpg.in", "include/SDL_config.h.in",
            # see [patch1] for more info
            "src/video/x11/SDL_x11sym.h",
            # see [patch2] for more info
            "src/video/quartz/SDL_QuartzVideo.h", "e9466ead70e5.patch", "bbfb41c13a87.patch",
            ],
    }) + glob(["build-scripts/*", "include/*.h"]),
    outs = [i.replace("include", "SDL") for i in glob(["include/*.h"])] + [
          "configure.consoleoutput",

          # see [patch1] for more info
          "patch1/src/video/x11/SDL_x11sym.h",

          # see [patch2] for more info
          "patch2/src/video/quartz/SDL_QuartzVideo.h",
        ],
    cmd = "\n".join([
          "mkdir -p $(@D)/SDL",
          "mkdir -p $(@D)/build-scripts",
          "mkdir -p $(@D)/include",
          "for i in $(SRCS) ; do",
          "  if [[ $${i} == *.patch ]] ; then",
          "    continue",
          "  fi",
          "  if [[ $${i} == external/" + workspace_name + "/include/* ]] ; then",
          "    cp \"$$i\" \"$(@D)/SDL/$$(basename \"$${i}\")\"",
          "    cp \"$$i\" \"$(@D)/include/$$(basename \"$${i}\")\"",
          "  elif [[ $${i} == external/" + workspace_name + "/build-scripts/* ]] ; then",
          "    cp \"$$i\" \"$(@D)/build-scripts/$$(basename \"$${i}\")\"",
          "  else",
          "    cp \"$${i}\" \"$(@D)/$$(basename \"$${i}\")\"",
          "  fi",
          "done",
          "",
        ]) + select({
        ":windows": "\n".join([
          "echo '' > $(@D)/configure.consoleoutput",
          "cp external/" + workspace_name + "/src/video/x11/SDL_x11sym.h $(@D)/patch1/src/video/x11/SDL_x11sym.h",
          "cp external/" + workspace_name + "/src/video/quartz/SDL_QuartzVideo.h $(@D)/patch2/src/video/quartz/SDL_QuartzVideo.h",
          "cp external/" + workspace_name + "/include/SDL_config_win32.h $(@D)/SDL/SDL_config.h",
          "",
        ]),
        ":windows_msys": "\n".join([
          "echo '' > $(@D)/configure.consoleoutput",
          "cp external/" + workspace_name + "/src/video/x11/SDL_x11sym.h $(@D)/patch1/src/video/x11/SDL_x11sym.h",
          "cp external/" + workspace_name + "/src/video/quartz/SDL_QuartzVideo.h $(@D)/patch2/src/video/quartz/SDL_QuartzVideo.h",
          "cp external/" + workspace_name + "/include/SDL_config_win32.h $(@D)/SDL/SDL_config.h",
          "",
        ]),
        ":windows_msvc": "\n".join([
          "echo '' > $(@D)/configure.consoleoutput",
          "cp external/" + workspace_name + "/src/video/x11/SDL_x11sym.h $(@D)/patch1/src/video/x11/SDL_x11sym.h",
          "cp external/" + workspace_name + "/src/video/quartz/SDL_QuartzVideo.h $(@D)/patch2/src/video/quartz/SDL_QuartzVideo.h",
          "cp external/" + workspace_name + "/include/SDL_config_win32.h $(@D)/SDL/SDL_config.h",
          "",
        ]),
        "//conditions:default": "\n".join([

          # see [patch1] for more info
          "rm -rf $(@D)/patch1/src/video/x11 && mkdir -p $(@D)/patch1/src/video/x11",
          "sed -e '/_XData32/s:register long:register _Xconst long:' external/" + workspace_name + "/src/video/x11/SDL_x11sym.h > $(@D)/patch1/src/video/x11/SDL_x11sym.h",
        #] + select({
        #    "//conditions:default": [],
        #    ":darwin": [
              # see [patch2] for more info
              "rm -rf $(@D)/patch2/src/video/quartz && mkdir -p $(@D)/patch2/src/video/quartz",
              "patch $$([ $$(uname) != Darwin ] && echo --follow-symlinks) -o $(@D)/patch2/src/video/quartz/SDL_QuartzVideo.h.intermed external/" + workspace_name + "/src/video/quartz/SDL_QuartzVideo.h $(location :e9466ead70e5.patch)",
              "patch $$([ $$(uname) != Darwin ] && echo --follow-symlinks) -o $(@D)/patch2/src/video/quartz/SDL_QuartzVideo.h $(@D)/patch2/src/video/quartz/SDL_QuartzVideo.h.intermed $(location :bbfb41c13a87.patch)",
              "rm $(@D)/patch2/src/video/quartz/SDL_QuartzVideo.h.intermed",
        #    ],
        #}) + [
          # TODO(ivucica): Patching rules only work while sandboxed. Why?
          # n.b. this is a workaround, replacing the above commands:
          #"cp external/" + workspace_name + "/src/video/quartz/SDL_QuartzVideo.h $(@D)/patch2/src/video/quartz/SDL_QuartzVideo.h",

          "$(@D)/configure $$(if [[ $$(uname) == Darwin ]]; then echo --disable-video-x11 ; fi; if [[ $$(uname) == Linux ]] ; then echo --disable-pulseaudio --disable-pulseaudio-shared ; fi ) 2>&1 " +
          "  > $(@D)/configure.consoleoutput || (cat $(@D)/configure.consoleoutput; exit 1)",
          "cp include/SDL_config.h $(@D)/SDL/SDL_config.h",
          "",
        ]),
    }),
    visibility = ["//visibility:public"],
)

# objc_library() is only intended for use with iOS. This is most
# unfortunate.
# We'll instead append .c to the inputs, then use Clang with the
# -x objective-c option.
genrule(
    name = "objectivec-as-c-hack",
    srcs = glob([
        "src/video/quartz/*.m",
        "Xcode/TemplatesForXcodeSnowLeopard/SDL Cocoa Application/*.m",
        ]),
    outs = ["objc" + i.replace(" ", "_") + ".c" for i in glob([
        "src/video/quartz/*.m",
        "Xcode/TemplatesForXcodeSnowLeopard/SDL Cocoa Application/*.m",
        ])],
    cmd = "\n".join(["echo '$(SRCS)' | sed 's/ external/@external/g'",
        "export IFS=\"@\n\"",
        "for i in $$(echo '$(SRCS)' | sed 's/ external/@external/g')",
        "do",
        " echo $${i}",
        " inospace=$${i// /_}",
        " echo $${inospace}",
        " mkdir -p \"$$(dirname \"$(@D)/objc$${inospace#external/libsdl12/}\")\"",
        " cp -v \"$$i\" \"$(@D)/objc$${inospace#external/libsdl12/}.c\"",
        "done",
    ]),
    visibility = ["//visibility:public"],
)

genrule(
    name = "no-spaces",
    srcs = ["Xcode/TemplatesForXcodeSnowLeopard/SDL Cocoa Application/SDLMain.h"],
    outs = ["Xcode/TemplatesForXcodeSnowLeopard/SDL_Cocoa_Application/SDLMain.h"],
    cmd = "mkdir -p $$(dirname $(OUTS)) && cp \"$(SRCS)\" $(OUTS)",
)

genrule(
    name = "fix-mac-audioplayer",
    outs = ["fix_mac_audioplayer.c"],
    cmd = "echo 'int IsConnected() { return 1; }' > $(OUTS)" # This function is expected #if DEBUG
)

cc_library(
    name = "sdlobjc",
    srcs = (["objc" + i + ".c" for i in glob(["src/video/quartz/*.m"])] +
        glob(["src/video/quartz/*.h", "src/video/*.h", "src/events/*.h"], exclude=[
                "src/video/quartz/SDL_QuartzVideo.h",  # see [patch2]
            ]) + [
                "patch2/src/video/quartz/SDL_QuartzVideo.h",  # see [patch2]
            ] +
        [i.replace("include/", "SDL/") for i in glob(["include/*.h"])]),
    includes = [".", "SDL", "patch2", "patch2/src/video/quartz", "external/libx11-dev/usr/include", "external/libxext-dev/usr/include"],
    copts = [
        "-x", "objective-c",
        "-Iexternal/x11repository",
        "-isystem", "external/libx11-dev/usr/include", # TODO: only if bin debs are used; or make x11repository expose these
        "-isystem", "external/libxext-dev/usr/include", # TODO: only if bin debs are used; or make x11repository expose these
        "-isystem", "external/x11proto-dev/usr/include", # TODO: only if bin debs are used; or make x11repository expose these
        "-isystem", "external/libalsaplayer-dev/usr/include", # TODO: only if bin debs are used; or make x11repository expose these
        "-isystem", "external/libasound2-dev/usr/include", # TODO: only if bin debs are used; or make x11repository expose these
        "-Iexternal/" + workspace_name + "/src/video/quartz",
    ]
)

cc_library(
    name = "sdlmain",
    srcs = select({
        ":darwin": ["objcXcode/TemplatesForXcodeSnowLeopard/SDL_Cocoa_Application/SDLMain.m.c"],
        ":windows": ["src/main/win32/SDL_win32_main.c"],
        ":windows_msys": ["src/main/win32/SDL_win32_main.c"],
        ":windows_msvc": ["src/main/win32/SDL_win32_main.c"],
        "//conditions:default": [],
    }),
    copts = select({
        ":darwin": ["-x", "objective-c"],
        "//conditions:default": [],
    }),
    hdrs = select({
        ":darwin": ["Xcode/TemplatesForXcodeSnowLeopard/SDL_Cocoa_Application/SDLMain.h"],
        "//conditions:default": [],
    }),
    includes = select({
        ":darwin": ["Xcode/TemplatesForXcodeSnowLeopard/SDL_Cocoa_Application"],
        "//conditions:default": [],
    }),
    deps = [":sdl"],
    visibility = ["//visibility:public"],
)

genrule(
  name = "patch2_2",
  outs = ["bbfb41c13a87.patch"],
  cmd = "\n".join([
        "base64 --decode > $(OUTS) << _EOF ",
        "IyBIRyBjaGFuZ2VzZXQgcGF0Y2gKIyBVc2VyIFNhbSBMYW50aW5nYSA8c2xvdWtlbkBsaWJzZGwu",
        "b3JnPgojIERhdGUgMTM3ODUzNTczMCAyNTIwMAojICAgICAgRnJpIFNlcCAwNiAyMzozNTozMCAy",
        "MDEzIC0wNzAwCiMgQnJhbmNoIFNETC0xLjIKIyBOb2RlIElEIGJiZmI0MWMxM2E4NzBkMmVmNDg3",
        "MjQyYjNhMjNkNTlmOGYyN2Y3ODMKIyBQYXJlbnQgIGU5NDY2ZWFkNzBlNTk2NGIzNzU3NTY0OWQ4",
        "ODYwMmMxMGU2ZDAxYzgKQmV0dGVyIGZpeCBmb3IgYnVnIDIwODUgLSBTREwgMS4yLjE1IGZhaWxz",
        "IHRvIGJ1aWxkIG9uIE9TWCAxMC45IE1hdmVyaWNrcywgdGhhbmtzIE96a2FuIQoKZGlmZiAtciBl",
        "OTQ2NmVhZDcwZTUgLXIgYmJmYjQxYzEzYTg3IHNyYy92aWRlby9xdWFydHovU0RMX1F1YXJ0elZp",
        "ZGVvLmgKLS0tIGEvc3JjL3ZpZGVvL3F1YXJ0ei9TRExfUXVhcnR6VmlkZW8uaAlUaHUgU2VwIDA1",
        "IDA2OjM4OjU3IDIwMTMgLTA3MDAKKysrIGIvc3JjL3ZpZGVvL3F1YXJ0ei9TRExfUXVhcnR6Vmlk",
        "ZW8uaAlGcmkgU2VwIDA2IDIzOjM1OjMwIDIwMTMgLTA3MDAKQEAgLTkxLDYgKzkxLDkgQEAKICAg",
        "ICBDR0RpcmVjdERpc3BsYXlJRCAgZGlzcGxheTsgICAgICAgICAgICAvKiAwID09IG1haW4gZGlz",
        "cGxheSAob25seSBzdXBwb3J0IHNpbmdsZSBkaXNwbGF5KSAqLwogICAgIGNvbnN0IHZvaWQgICAg",
        "ICAgICAqbW9kZTsgICAgICAgICAgICAgIC8qIGN1cnJlbnQgbW9kZSBvZiB0aGUgZGlzcGxheSAq",
        "LwogICAgIGNvbnN0IHZvaWQgICAgICAgICAqc2F2ZV9tb2RlOyAgICAgICAgIC8qIG9yaWdpbmFs",
        "IG1vZGUgb2YgdGhlIGRpc3BsYXkgKi8KKyNpZiAoTUFDX09TX1hfVkVSU0lPTl9NSU5fUkVRVUlS",
        "RUQgPCAxMDcwKQorICAgIENHRGlyZWN0UGFsZXR0ZVJlZiBwYWxldHRlOyAgICAgICAgICAgIC8q",
        "IHBhbGV0dGUgb2YgYW4gOC1iaXQgZGlzcGxheSAqLworI2VuZGlmCiAgICAgTlNPcGVuR0xDb250",
        "ZXh0ICAgICpnbF9jb250ZXh0OyAgICAgICAgLyogT3BlbkdMIHJlbmRlcmluZyBjb250ZXh0ICov",
        "CiAgICAgTlNHcmFwaGljc0NvbnRleHQgICpuc2dmeF9jb250ZXh0OyAgICAgLyogQ29jb2EgZ3Jh",
        "cGhpY3MgY29udGV4dCAqLwogICAgIFVpbnQzMiAgICAgICAgICAgICB3aWR0aCwgaGVpZ2h0LCBi",
        "cHA7IC8qIGZyZXF1ZW50bHkgdXNlZCBkYXRhIGFib3V0IHRoZSBkaXNwbGF5ICovCg==",
        "_EOF",
  ]),
)

genrule(
  name = "patch2_1",
  outs = ["e9466ead70e5.patch"],
  cmd = "\n".join([
        "base64 --decode > $(OUTS) << _EOF ",
        "IyBIRyBjaGFuZ2VzZXQgcGF0Y2gKIyBVc2VyIFNhbSBMYW50aW5nYSA8c2xvdWtlbkBsaWJzZGwu",
        "b3JnPgojIERhdGUgMTM3ODM4ODMzNyAyNTIwMAojICAgICAgVGh1IFNlcCAwNSAwNjozODo1NyAy",
        "MDEzIC0wNzAwCiMgQnJhbmNoIFNETC0xLjIKIyBOb2RlIElEIGU5NDY2ZWFkNzBlNTk2NGIzNzU3",
        "NTY0OWQ4ODYwMmMxMGU2ZDAxYzgKIyBQYXJlbnQgIDk1Mjc5MWRiZTZiYWUxMWY0MTQ2ZjQxMjY2",
        "M2U0NTg1MmY0NjZmOTQKRml4ZWQgYnVnIDIwODUgLSBTREwgMS4yLjE1IGZhaWxzIHRvIGJ1aWxk",
        "IG9uIE9TWCAxMC45IE1hdmVyaWNrcyA/IGRlcHJlY2F0ZWQgQ0dEaXJlY3RQYWxldHRlUmVmIHdh",
        "cyByZW1vdmVkCgpBZHJpYW4gUGV0cmVzY3UKClRoZSBDR0RpcmVjdFBhbGV0dGVSZWYgc3RydWN0",
        "IG5vIGxvbmdlciBleGlzdHMgaW4gMTAuOSAoaXQgaGFkIGJlZW4gcHJldmlvdXNseSBkZXByZWNh",
        "dGVkKSB3aGljaCBwcmV2ZW50cyBTREwgMS4yLjE1IGZyb20gYnVpbGRpbmcgd2l0aCB0aGUgZm9s",
        "bG93aW5nIGVycm9yOgoKICAgIEluIGZpbGUgaW5jbHVkZWQgZnJvbSAuL3NyYy92aWRlby9xdWFy",
        "dHovU0RMX1F1YXJ0ekV2ZW50cy5tOjI0OgogICAgLi9zcmMvdmlkZW8vcXVhcnR6L1NETF9RdWFy",
        "dHpWaWRlby5oOjk0OjU6IGVycm9yOiB1bmtub3duIHR5cGUgbmFtZSAnQ0dEaXJlY3RQYWxldHRl",
        "UmVmJwogICAgICAgIENHRGlyZWN0UGFsZXR0ZVJlZiBwYWxldHRlOyAgICAgICAgICAgIC8qIHBh",
        "bGV0dGUgb2YgYW4gOC1iaXQgZGlzcGxheSAqLwogICAgICAgIF4KCkkgd2FzIGFibGUgdG8gbWFr",
        "ZSBldmVyeXRoaW5nIGNvbXBpbGUganVzdCBieSByZW1vdmluZyB0aGF0IGl0ZW0gZnJvbSB0aGUg",
        "c3RydWN0LCBub3RoaW5nIGVsc2UgaW4gbGlic2RsIHNlZW1zIHRvIGRlcGVuZCBvbiBpdCwgYnV0",
        "IEkgaGF2ZSAqbm8qIGlkZWEgaWYgdGhpcyBpcyBhIHZhbGlkIGZpeCwga25vd2luZyBuZXh0IHRv",
        "IG5vdGhpbmcgYWJvdXQgU0RMLgoKZGlmZiAtciA5NTI3OTFkYmU2YmEgLXIgZTk0NjZlYWQ3MGU1",
        "IHNyYy92aWRlby9xdWFydHovU0RMX1F1YXJ0elZpZGVvLmgKLS0tIGEvc3JjL3ZpZGVvL3F1YXJ0",
        "ei9TRExfUXVhcnR6VmlkZW8uaAlTYXQgQXVnIDEwIDEwOjU0OjAzIDIwMTMgLTA3MDAKKysrIGIv",
        "c3JjL3ZpZGVvL3F1YXJ0ei9TRExfUXVhcnR6VmlkZW8uaAlUaHUgU2VwIDA1IDA2OjM4OjU3IDIw",
        "MTMgLTA3MDAKQEAgLTkxLDcgKzkxLDYgQEAKICAgICBDR0RpcmVjdERpc3BsYXlJRCAgZGlzcGxh",
        "eTsgICAgICAgICAgICAvKiAwID09IG1haW4gZGlzcGxheSAob25seSBzdXBwb3J0IHNpbmdsZSBk",
        "aXNwbGF5KSAqLwogICAgIGNvbnN0IHZvaWQgICAgICAgICAqbW9kZTsgICAgICAgICAgICAgIC8q",
        "IGN1cnJlbnQgbW9kZSBvZiB0aGUgZGlzcGxheSAqLwogICAgIGNvbnN0IHZvaWQgICAgICAgICAq",
        "c2F2ZV9tb2RlOyAgICAgICAgIC8qIG9yaWdpbmFsIG1vZGUgb2YgdGhlIGRpc3BsYXkgKi8KLSAg",
        "ICBDR0RpcmVjdFBhbGV0dGVSZWYgcGFsZXR0ZTsgICAgICAgICAgICAvKiBwYWxldHRlIG9mIGFu",
        "IDgtYml0IGRpc3BsYXkgKi8KICAgICBOU09wZW5HTENvbnRleHQgICAgKmdsX2NvbnRleHQ7ICAg",
        "ICAgICAvKiBPcGVuR0wgcmVuZGVyaW5nIGNvbnRleHQgKi8KICAgICBOU0dyYXBoaWNzQ29udGV4",
        "dCAgKm5zZ2Z4X2NvbnRleHQ7ICAgICAvKiBDb2NvYSBncmFwaGljcyBjb250ZXh0ICovCiAgICAg",
        "VWludDMyICAgICAgICAgICAgIHdpZHRoLCBoZWlnaHQsIGJwcDsgLyogZnJlcXVlbnRseSB1c2Vk",
        "IGRhdGEgYWJvdXQgdGhlIGRpc3BsYXkgKi8K",
        "_EOF",

  ]),
)
# [patch1]: http://www.linuxfromscratch.org/blfs/view/svn/multimedia/sdl.html
# for _XData32 conflict.
# [patch2]: https://bugzilla.libsdl.org/show_bug.cgi?id=2085
# CGDirectPaletteRef not available on newer OSX
